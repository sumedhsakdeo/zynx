!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddChunkToServerMapping	LayoutManager.cc	/^LayoutManager::AddChunkToServerMapping(chunkId_t chunkId, fid_t fid,$/;"	f	class:LayoutManager
AddCounter	request.cc	/^AddCounter(const char *name, MetaOp opName)$/;"	f	namespace:KFS
AddNewServer	LayoutManager.cc	/^LayoutManager::AddNewServer(MetaHello *r)$/;"	f	class:LayoutManager
AddNotStableChunk	LayoutManager.cc	/^LayoutManager::AddNotStableChunk($/;"	f	class:LayoutManager
AddPending	LayoutManager.cc	/^ARAChunkCache::Entry::AddPending(MetaAllocate& req)$/;"	f	class:ARAChunkCache::Entry
AddServerToMakeStable	LayoutManager.cc	/^LayoutManager::AddServerToMakeStable($/;"	f	class:LayoutManager
Allocate	metaserver_main.cc	/^    virtual char* Allocate()$/;"	f	class:BufferAllocator
AllocateChunk	ChunkServer.cc	/^ChunkServer::AllocateChunk(MetaAllocate *r, int64_t leaseId)$/;"	f	class:ChunkServer
AllocateChunk	LayoutManager.cc	/^LayoutManager::AllocateChunk(MetaAllocate *r)$/;"	f	class:LayoutManager
AllocateChunkForAppend	LayoutManager.cc	/^LayoutManager::AllocateChunkForAppend(MetaAllocate *req)$/;"	f	class:LayoutManager
BeginMakeChunkStable	ChunkServer.cc	/^ChunkServer::BeginMakeChunkStable(fid_t fid, chunkId_t chunkId, seq_t chunkVersion)$/;"	f	class:ChunkServer
BeginMakeChunkStable	LayoutManager.cc	/^	BeginMakeChunkStable(fid_t f, chunkId_t c, seq_t v)$/;"	f	class:BeginMakeChunkStable
BeginMakeChunkStable	LayoutManager.cc	/^class BeginMakeChunkStable$/;"	c	file:
BeginMakeChunkStableDone	LayoutManager.cc	/^LayoutManager::BeginMakeChunkStableDone(const MetaBeginMakeChunkStable* req)$/;"	f	class:LayoutManager
BufferAllocator	metaserver_main.cc	/^    BufferAllocator()$/;"	f	class:BufferAllocator
BufferAllocator	metaserver_main.cc	/^class BufferAllocator : public libkfsio::IOBufferAllocator$/;"	c	file:
CMD_BUF_SIZE	kfsfsck_main.cc	/^int CMD_BUF_SIZE = 4096;$/;"	v
CONCURRENT_WRITES_PER_NODE_WATERMARK	LayoutManager.cc	/^const uint32_t CONCURRENT_WRITES_PER_NODE_WATERMARK = 10;$/;"	v
CanReplicateChunkNow	LayoutManager.cc	/^LayoutManager::CanReplicateChunkNow(chunkId_t chunkId,$/;"	f	class:LayoutManager
CancelPendingMakeStable	LayoutManager.cc	/^LayoutManager::CancelPendingMakeStable(fid_t fid, chunkId_t chunkId)$/;"	f	class:LayoutManager
ChangeChunkReplication	LayoutManager.cc	/^LayoutManager::ChangeChunkReplication(chunkId_t chunkId)$/;"	f	class:LayoutManager
ChangeIncarnationNumber	request.cc	/^ChangeIncarnationNumber(MetaRequest *r)$/;"	f	namespace:KFS
CheckAllLeases	LayoutManager.cc	/^LayoutManager::CheckAllLeases()$/;"	f	class:LayoutManager
CheckHibernatingServersStatus	LayoutManager.cc	/^LayoutManager::CheckHibernatingServersStatus()$/;"	f	class:LayoutManager
ChunkCorrupt	LayoutManager.cc	/^LayoutManager::ChunkCorrupt(MetaChunkCorrupt *r)$/;"	f	class:LayoutManager
ChunkDeletor	LayoutManager.cc	/^	ChunkDeletor(chunkId_t c)$/;"	f	class:ChunkDeletor
ChunkDeletor	LayoutManager.cc	/^class ChunkDeletor {$/;"	c	file:
ChunkIdLt	kfsops.cc	/^ChunkIdLt(MetaChunkInfo *m, chunkId_t myid) $/;"	f	file:
ChunkIdMatch	kfsops.cc	/^	ChunkIdMatch(seq_t c) : myid(c) { }$/;"	f	class:ChunkIdMatch
ChunkIdMatch	kfsops.cc	/^class ChunkIdMatch {$/;"	c	file:
ChunkIdMatcher	LayoutManager.cc	/^	ChunkIdMatcher(chunkId_t c) : myid(c) { }$/;"	f	class:ChunkIdMatcher
ChunkIdMatcher	LayoutManager.cc	/^class ChunkIdMatcher {$/;"	c	file:
ChunkInfo_compare	kfsops.cc	/^ChunkInfo_compare(MetaChunkInfo *first, MetaChunkInfo *second)$/;"	f	file:
ChunkReplicationChecker	LayoutManager.cc	/^LayoutManager::ChunkReplicationChecker()$/;"	f	class:LayoutManager
ChunkReplicationDone	LayoutManager.cc	/^LayoutManager::ChunkReplicationDone(MetaChunkReplicate *req)$/;"	f	class:LayoutManager
ChunkReplicator	ChunkReplicator.cc	/^ChunkReplicator::ChunkReplicator() :$/;"	f	class:ChunkReplicator
ChunkServer	ChunkServer.cc	/^ChunkServer::ChunkServer() :$/;"	f	class:ChunkServer
ChunkServer	ChunkServer.cc	/^ChunkServer::ChunkServer(NetConnectionPtr &conn) :$/;"	f	class:ChunkServer
ChunkVersionChanger	request.cc	/^	ChunkVersionChanger(fid_t f, chunkId_t c, seq_t v) :$/;"	f	class:KFS::ChunkVersionChanger
ChunkVersionChanger	request.cc	/^class ChunkVersionChanger {$/;"	c	namespace:KFS	file:
ClientSM	ClientSM.cc	/^ClientSM::ClientSM(NetConnectionPtr &conn)$/;"	f	class:ClientSM
CoalesceBlocks	LayoutManager.cc	/^LayoutManager::CoalesceBlocks(const vector<chunkId_t>& srcChunks, fid_t srcFid,$/;"	f	class:LayoutManager
ComputeTimeDiff	util.cc	/^float KFS::ComputeTimeDiff(const struct timeval &startTime, $/;"	f	class:KFS
Counter	ClientSM.cc	/^		Counter()$/;"	f	struct:RequestStatsGatherer::Counter
Counter	ClientSM.cc	/^	struct Counter {$/;"	s	class:RequestStatsGatherer	file:
Deallocate	metaserver_main.cc	/^    virtual void Deallocate($/;"	f	class:BufferAllocator
DecChunkWriteCount	LayoutManager.cc	/^	DecChunkWriteCount(const CSMap& map, fid_t fid, chunkId_t chunkId)$/;"	f	class:DecChunkWriteCount
DecChunkWriteCount	LayoutManager.cc	/^class DecChunkWriteCount {$/;"	c	file:
DeleteAddlChunkReplicas	LayoutManager.cc	/^LayoutManager::DeleteAddlChunkReplicas(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
DeleteAll	ClientSM.cc	/^DeleteAll(LIST& list)$/;"	f	file:
DeleteChunk	ChunkServer.cc	/^ChunkServer::DeleteChunk(chunkId_t chunkId)$/;"	f	class:ChunkServer
DeleteChunk	LayoutManager.cc	/^LayoutManager::DeleteChunk(chunkId_t chunkId)$/;"	f	class:LayoutManager
DeleteChunk	meta.cc	/^MetaChunkInfo::DeleteChunk()$/;"	f	class:MetaChunkInfo
Dispatch	ChunkServer.cc	/^ChunkServer::Dispatch()$/;"	f	class:ChunkServer
Dispatch	LayoutManager.cc	/^LayoutManager::Dispatch()$/;"	f	class:LayoutManager
Dispatch	NetDispatch.cc	/^NetDispatch::Dispatch(MetaRequest *r)$/;"	f	class:NetDispatch
Dispatcher	LayoutManager.cc	/^	Dispatcher() { }$/;"	f	class:Dispatcher
Dispatcher	LayoutManager.cc	/^class Dispatcher {$/;"	c	file:
DumpChunkReplicationCandidates	LayoutManager.cc	/^LayoutManager::DumpChunkReplicationCandidates(ostringstream &os)$/;"	f	class:LayoutManager
DumpChunkToServerMap	LayoutManager.cc	/^LayoutManager::DumpChunkToServerMap(const string &dirToUse)$/;"	f	class:LayoutManager
DumpChunkToServerMap	LayoutManager.cc	/^LayoutManager::DumpChunkToServerMap(ostringstream &os)$/;"	f	class:LayoutManager
Enqueue	ChunkServer.cc	/^ChunkServer::Enqueue(MetaChunkRequest *r) $/;"	f	class:ChunkServer
EnumerateLocations	request.cc	/^	EnumerateLocations(vector <ServerLocation> &result): v(result) { }$/;"	f	class:KFS::EnumerateLocations
EnumerateLocations	request.cc	/^class EnumerateLocations {$/;"	c	namespace:KFS	file:
EnumerateReaddirPlusInfo	request.cc	/^	EnumerateReaddirPlusInfo(ostream &o) : os(o) { }$/;"	f	class:KFS::EnumerateReaddirPlusInfo
EnumerateReaddirPlusInfo	request.cc	/^class EnumerateReaddirPlusInfo {$/;"	c	namespace:KFS	file:
EraseReallocIfNeeded	LayoutManager.cc	/^template<typename T, typename I> static T& EraseReallocIfNeeded(T& vec, I b, I e) {$/;"	f	file:
Error	ChunkServer.cc	/^ChunkServer::Error(const char* errorMsg)$/;"	f	class:ChunkServer
EvacuateChunkChecker	LayoutManager.cc	/^	EvacuateChunkChecker(ReplicationCandidates &c, CSMap &m) :$/;"	f	class:EvacuateChunkChecker
EvacuateChunkChecker	LayoutManager.cc	/^class EvacuateChunkChecker {$/;"	c	file:
EvacuateChunkDone	ChunkServer.cc	/^ChunkServer::EvacuateChunkDone(chunkId_t chunkId)$/;"	f	class:ChunkServer
ExecuteRebalancePlan	LayoutManager.cc	/^LayoutManager::ExecuteRebalancePlan()$/;"	f	class:LayoutManager
ExecuteRebalancePlan	LayoutManager.cc	/^LayoutManager::ExecuteRebalancePlan(ChunkServerPtr &c)$/;"	f	class:LayoutManager
ExpireLeaseIfOwner	LayoutManager.cc	/^	ExpireLeaseIfOwner(const ChunkServer *t)$/;"	f	struct:ExpireLeaseIfOwner
ExpireLeaseIfOwner	LayoutManager.cc	/^struct ExpireLeaseIfOwner$/;"	s	file:
ExpiredLeaseCleanup	LayoutManager.cc	/^LayoutManager::ExpiredLeaseCleanup($/;"	f	class:LayoutManager
ExpiredLeaseCleanup	LayoutManager.cc	/^LayoutManager::ExpiredLeaseCleanup(chunkId_t chunkId)$/;"	f	class:LayoutManager
FailDispatchedOps	ChunkServer.cc	/^ChunkServer::FailDispatchedOps()$/;"	f	class:ChunkServer
FailPendingOps	ChunkServer.cc	/^ChunkServer::FailPendingOps()$/;"	f	class:ChunkServer
FattrReply	request.cc	/^static inline string FattrReply(const MetaFattr *fa)$/;"	f	namespace:KFS
FindCandidateRacks	LayoutManager.cc	/^LayoutManager::FindCandidateRacks(vector<int> &result)$/;"	f	class:LayoutManager
FindCandidateRacks	LayoutManager.cc	/^LayoutManager::FindCandidateRacks(vector<int> &result, const set<int> &excludes)$/;"	f	class:LayoutManager
FindCandidateServers	LayoutManager.cc	/^LayoutManager::FindCandidateServers(vector<ChunkServerPtr> &result,$/;"	f	class:LayoutManager
FindInterRackRebalanceCandidate	LayoutManager.cc	/^LayoutManager::FindInterRackRebalanceCandidate(ChunkServerPtr &candidate,$/;"	f	class:LayoutManager
FindIntraRackRebalanceCandidates	LayoutManager.cc	/^LayoutManager::FindIntraRackRebalanceCandidates(vector<ChunkServerPtr> &candidates,$/;"	f	class:LayoutManager
FindMatchingRequest	ChunkServer.cc	/^ChunkServer::FindMatchingRequest(seq_t cseq)$/;"	f	class:ChunkServer
FindReplicationWorkForServer	LayoutManager.cc	/^LayoutManager::FindReplicationWorkForServer(ChunkServerPtr &server, chunkId_t chunkReplicated)$/;"	f	class:LayoutManager
ForceDown	ChunkServer.cc	/^ChunkServer::ForceDown()$/;"	f	class:ChunkServer
Fsck	LayoutManager.cc	/^LayoutManager::Fsck(ostringstream &os)$/;"	f	class:LayoutManager
GetBufferPool	metaserver_main.cc	/^    QCIoBufferPool& GetBufferPool()$/;"	f	class:BufferAllocator
GetBufferSize	metaserver_main.cc	/^    virtual size_t GetBufferSize() const$/;"	f	class:BufferAllocator
GetChunkFileId	LayoutManager.cc	/^LayoutManager::GetChunkFileId(chunkId_t chunkId, fid_t& fileId)$/;"	f	class:LayoutManager
GetChunkReadLease	LayoutManager.cc	/^LayoutManager::GetChunkReadLease(MetaLeaseAcquire *req)$/;"	f	class:LayoutManager
GetChunkServerCounters	LayoutManager.cc	/^LayoutManager::GetChunkServerCounters() const$/;"	f	class:LayoutManager
GetChunkSize	ChunkServer.cc	/^ChunkServer::GetChunkSize(fid_t fid, chunkId_t chunkId, const string &pathname)$/;"	f	class:ChunkServer
GetChunkSizeDone	LayoutManager.cc	/^LayoutManager::GetChunkSizeDone(MetaChunkSize* req)$/;"	f	class:LayoutManager
GetChunkToServerMapping	LayoutManager.cc	/^LayoutManager::GetChunkToServerMapping(chunkId_t chunkId, vector<ChunkServerPtr> &c)$/;"	f	class:LayoutManager
GetChunkWriteLease	LayoutManager.cc	/^LayoutManager::GetChunkWriteLease(MetaAllocate *r, bool &isNewLease)$/;"	f	class:LayoutManager
GetIoBufAllocator	metaserver_main.cc	/^static BufferAllocator& GetIoBufAllocator()$/;"	f	file:
GetOp	ChunkServer.cc	/^ChunkServer::GetOp(IOBuffer& iobuf, int msgLen, const char* errMsgPrefix)$/;"	f	class:ChunkServer
GetOpenFiles	LayoutManager.cc	/^LayoutManager::GetOpenFiles(string &openForRead, string &openForWrite)$/;"	f	class:LayoutManager
GetRetiringStatus	ChunkServer.cc	/^ChunkServer::GetRetiringStatus(string &result)$/;"	f	class:ChunkServer
HandleClientCmd	ClientSM.cc	/^ClientSM::HandleClientCmd(IOBuffer *iobuf, int cmdLen)$/;"	f	class:ClientSM
HandleCmd	ChunkServer.cc	/^ChunkServer::HandleCmd(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleEvent	ChunkReplicator.cc	/^ChunkReplicator::HandleEvent(int code, void *data)$/;"	f	class:ChunkReplicator
HandleEvent	LeaseCleaner.cc	/^LeaseCleaner::HandleEvent(int code, void *data)$/;"	f	class:LeaseCleaner
HandleHelloMsg	ChunkServer.cc	/^ChunkServer::HandleHelloMsg(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleMsg	ChunkServer.cc	/^ChunkServer::HandleMsg(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleReply	ChunkServer.cc	/^ChunkServer::HandleReply(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleRequest	ChunkServer.cc	/^ChunkServer::HandleRequest(int code, void *data)$/;"	f	class:ChunkServer
HandleRequest	ClientSM.cc	/^ClientSM::HandleRequest(int code, void *data)$/;"	f	class:ClientSM
HandleTerminate	ClientSM.cc	/^ClientSM::HandleTerminate(int code, void *data)$/;"	f	class:ClientSM
HandoutChunkReplicationWork	LayoutManager.cc	/^LayoutManager::HandoutChunkReplicationWork(CRCandidateSet &candidates,$/;"	f	class:LayoutManager
Heartbeat	ChunkServer.cc	/^ChunkServer::Heartbeat()$/;"	f	class:ChunkServer
HeartbeatChunkServers	LayoutManager.cc	/^LayoutManager::HeartbeatChunkServers()$/;"	f	class:LayoutManager
Heartbeater	LayoutManager.cc	/^	Heartbeater() { }$/;"	f	class:Heartbeater
Heartbeater	LayoutManager.cc	/^class Heartbeater {$/;"	c	file:
InRecovery	LayoutManager.cc	/^inline bool LayoutManager::InRecovery() const$/;"	f	class:LayoutManager
InRecoveryPeriod	LayoutManager.cc	/^inline bool LayoutManager::InRecoveryPeriod() const$/;"	f	class:LayoutManager
InitCheckAllChunks	LayoutManager.cc	/^LayoutManager::InitCheckAllChunks()$/;"	f	class:LayoutManager
Invalidate	LayoutManager.cc	/^ARAChunkCache::Invalidate(fid_t fid)$/;"	f	class:ARAChunkCache
Invalidate	LayoutManager.cc	/^ARAChunkCache::Invalidate(fid_t fid, chunkId_t chunkId)$/;"	f	class:ARAChunkCache
Invalidate	LayoutManager.cc	/^ARAChunkCache::Invalidate(iterator it)$/;"	f	class:ARAChunkCache
InvalidateWriteLease	LayoutManager.cc	/^LayoutManager::InvalidateWriteLease(chunkId_t chunkId)$/;"	f	class:LayoutManager
IsAnyServerAvailForReReplication	LayoutManager.cc	/^LayoutManager::IsAnyServerAvailForReReplication() const$/;"	f	class:LayoutManager
IsCandidateServer	LayoutManager.cc	/^IsCandidateServer(const ChunkServerPtr &c)$/;"	f	file:
IsChunkHostedOnServer	LayoutManager.cc	/^LayoutManager::IsChunkHostedOnServer(const vector<ChunkServerPtr> &hosters,$/;"	f	class:LayoutManager
IsChunkServerRestartAllowed	LayoutManager.cc	/^inline bool LayoutManager::IsChunkServerRestartAllowed() const$/;"	f	class:LayoutManager
IsChunkStable	LayoutManager.cc	/^LayoutManager::IsChunkStable(chunkId_t chunkId)$/;"	f	class:LayoutManager
IsMsgAvail	util.cc	/^KFS::IsMsgAvail(IOBuffer *iobuf,$/;"	f	class:KFS
IsValidLeaseIssued	LayoutManager.cc	/^LayoutManager::IsValidLeaseIssued(const vector <MetaChunkInfo *> &c)$/;"	f	class:LayoutManager
KFS	ChildProcessTracker.cc	/^namespace KFS$/;"	n	file:
KFS	request.cc	/^namespace KFS {$/;"	n	file:
KFS_VERSION_STR	kfsfsck_main.cc	/^const string KFS_VERSION_STR = "KFS\/1.0";$/;"	v
LayoutDone	request.cc	/^MetaAllocate::LayoutDone()$/;"	f	class:KFS::MetaAllocate
LayoutManager	LayoutManager.cc	/^LayoutManager::LayoutManager() :$/;"	f	class:LayoutManager
LeaseCleaner	LeaseCleaner.cc	/^LeaseCleaner::LeaseCleaner() :$/;"	f	class:LeaseCleaner
LeaseCleanup	LayoutManager.cc	/^LayoutManager::LeaseCleanup()$/;"	f	class:LayoutManager
LeaseExpired	LayoutManager.cc	/^	LeaseExpired(time_t n): now(n) { }$/;"	f	class:LeaseExpired
LeaseExpired	LayoutManager.cc	/^class LeaseExpired {$/;"	c	file:
LeaseIdMatcher	LayoutManager.cc	/^	LeaseIdMatcher(int64_t id) : myid(id) { }$/;"	f	class:LeaseIdMatcher
LeaseIdMatcher	LayoutManager.cc	/^class LeaseIdMatcher {$/;"	c	file:
LeaseRelinquish	LayoutManager.cc	/^LayoutManager::LeaseRelinquish(MetaLeaseRelinquish *req)$/;"	f	class:LayoutManager
LeaseRenew	LayoutManager.cc	/^LayoutManager::LeaseRenew(MetaLeaseRenew *req)$/;"	f	class:LayoutManager
ListServerLocations	request.cc	/^	ListServerLocations(ostream &out): os(out) { }$/;"	f	class:KFS::ListServerLocations
ListServerLocations	request.cc	/^class ListServerLocations {$/;"	c	namespace:KFS	file:
LoadRebalancePlan	LayoutManager.cc	/^LayoutManager::LoadRebalancePlan(const string &planFn)$/;"	f	class:LayoutManager
LoadedServerPred	LayoutManager.cc	/^	LoadedServerPred(double m) : maxServerSpaceUtilThreshold(m) { }$/;"	f	class:LoadedServerPred
LoadedServerPred	LayoutManager.cc	/^class LoadedServerPred {$/;"	c	file:
LogMakeChunkStableDone	LayoutManager.cc	/^LayoutManager::LogMakeChunkStableDone(const MetaLogMakeChunkStable* req)$/;"	f	class:LayoutManager
MAX_CONCURRENT_READ_REPLICATIONS_PER_NODE	LayoutManager.cc	/^int MAX_CONCURRENT_READ_REPLICATIONS_PER_NODE = 10;$/;"	v
MAX_CONCURRENT_WRITE_REPLICATIONS_PER_NODE	LayoutManager.cc	/^int MAX_CONCURRENT_WRITE_REPLICATIONS_PER_NODE = 5;$/;"	v
MAX_TIME_FOR_CHUNK_REPLICATION_CHECK	LayoutManager.cc	/^const float MAX_TIME_FOR_CHUNK_REPLICATION_CHECK = 0.5;$/;"	v
MAX_TIME_TO_FIND_ADDL_REPLICATION_WORK	LayoutManager.cc	/^const float MAX_TIME_TO_FIND_ADDL_REPLICATION_WORK = 0.005;$/;"	v
MakeChunkStable	ChunkServer.cc	/^ChunkServer::MakeChunkStable(fid_t fid, chunkId_t chunkId, seq_t chunkVersion,$/;"	f	class:ChunkServer
MakeChunkStable	LayoutManager.cc	/^	MakeChunkStable(fid_t f, chunkId_t c, seq_t v,$/;"	f	class:MakeChunkStable
MakeChunkStable	LayoutManager.cc	/^class MakeChunkStable$/;"	c	file:
MakeChunkStableDone	LayoutManager.cc	/^LayoutManager::MakeChunkStableDone(const MetaChunkMakeStable* req)$/;"	f	class:LayoutManager
MakeChunkStableInit	LayoutManager.cc	/^LayoutManager::MakeChunkStableInit($/;"	f	class:LayoutManager
MapDumper	LayoutManager.cc	/^	MapDumper(ofstream &o) : ofs(o) { }$/;"	f	class:MapDumper
MapDumper	LayoutManager.cc	/^class MapDumper {$/;"	c	file:
MapDumperStream	LayoutManager.cc	/^	MapDumperStream(ostringstream &o) : ofs(o) { }$/;"	f	class:MapDumperStream
MapDumperStream	LayoutManager.cc	/^class MapDumperStream {$/;"	c	file:
MapPurger	LayoutManager.cc	/^	MapPurger(ReplicationCandidates &c, ARAChunkCache& ac, const ChunkServer *t)$/;"	f	class:MapPurger
MapPurger	LayoutManager.cc	/^class MapPurger {$/;"	c	file:
MapRetirer	LayoutManager.cc	/^	MapRetirer(ReplicationCandidates &c, ChunkServer *t):$/;"	f	class:MapRetirer
MapRetirer	LayoutManager.cc	/^class MapRetirer {$/;"	c	file:
MatchServerByHost	LayoutManager.cc	/^	MatchServerByHost(const string &s) : host(s) { }$/;"	f	class:MatchServerByHost
MatchServerByHost	LayoutManager.cc	/^class MatchServerByHost {$/;"	c	file:
MatchingServer	LayoutManager.cc	/^	MatchingServer(const ServerLocation &l) : loc(l) { }$/;"	f	class:MatchingServer
MatchingServer	LayoutManager.cc	/^class MatchingServer {$/;"	c	file:
MicorSecs	ClientSM.cc	/^	static int64_t MicorSecs(const struct timeval& tv)$/;"	f	class:RequestStatsGatherer	file:
NDAYS_PER_FULL_REPLICATION_CHECK	LayoutManager.cc	/^int NDAYS_PER_FULL_REPLICATION_CHECK = 30;$/;"	v
NetDispatch	NetDispatch.cc	/^NetDispatch::NetDispatch()$/;"	f	class:NetDispatch
NotifyChunkVersChange	ChunkServer.cc	/^ChunkServer::NotifyChunkVersChange(fid_t fid, chunkId_t chunkId, seq_t chunkVers)$/;"	f	class:ChunkServer
NotifyStaleChunk	ChunkServer.cc	/^ChunkServer::NotifyStaleChunk(chunkId_t staleChunkId)$/;"	f	class:ChunkServer
NotifyStaleChunks	ChunkServer.cc	/^ChunkServer::NotifyStaleChunks(const vector<chunkId_t> &staleChunkIds)$/;"	f	class:ChunkServer
OkHeader	request.cc	/^OkHeader(const MetaRequest* op, ostream &os, bool checkStatus = true)$/;"	f	namespace:KFS
OpCounterMap	request.cc	/^typedef map<MetaOp, Counter *> OpCounterMap;$/;"	t	namespace:KFS	file:
OpCounterMapIter	request.cc	/^typedef map<MetaOp, Counter *>::iterator OpCounterMapIter;$/;"	t	namespace:KFS	file:
OpDone	ClientSM.cc	/^	void OpDone(const MetaRequest& op)$/;"	f	class:RequestStatsGatherer
OpFailer	ChunkServer.cc	/^	OpFailer(int c) : errCode(c) { };$/;"	f	class:OpFailer
OpFailer	ChunkServer.cc	/^class OpFailer {$/;"	c	file:
OpMatch	ChunkServer.cc	/^	OpMatch(seq_t s) : myseq(s) { }$/;"	f	class:OpMatch
OpMatch	ChunkServer.cc	/^class OpMatch {$/;"	c	file:
OpenFileChecker	LayoutManager.cc	/^	OpenFileChecker(set<fid_t> &r, set<fid_t> &w) :$/;"	f	class:OpenFileChecker
OpenFileChecker	LayoutManager.cc	/^class OpenFileChecker {$/;"	c	file:
ParseCommand	request.cc	/^ParseCommand(std::istream& is, MetaRequest **res)$/;"	f	namespace:KFS
ParseHandler	request.cc	/^typedef int (*ParseHandler)(Properties &, MetaRequest **);$/;"	t	namespace:KFS	file:
ParseHandlerMap	request.cc	/^typedef map<string, ParseHandler> ParseHandlerMap;$/;"	t	namespace:KFS	file:
ParseHandlerMapIter	request.cc	/^typedef map<string, ParseHandler>::iterator ParseHandlerMapIter;$/;"	t	namespace:KFS	file:
ParseResponse	ChunkServer.cc	/^ChunkServer::ParseResponse(std::istream& is, Properties &prop)$/;"	f	class:ChunkServer
PeerName	ClientSM.cc	/^PeerName(NetConnectionPtr conn)$/;"	f
Ping	ChunkServer.cc	/^ChunkServer::Ping(string &result)$/;"	f	class:ChunkServer
Ping	LayoutManager.cc	/^LayoutManager::Ping(string &systemInfo, string &upServers, string &downServers, string &retiringServers)$/;"	f	class:LayoutManager
Pinger	LayoutManager.cc	/^	Pinger(string &r, uint64_t &t, uint64_t &u) :$/;"	f	class:Pinger
Pinger	LayoutManager.cc	/^class Pinger {$/;"	c	file:
PrintChunkServerInfo	LayoutManager.cc	/^	PrintChunkServerInfo(ofstream &o) : ofs(o) { }$/;"	f	class:PrintChunkServerInfo
PrintChunkServerInfo	LayoutManager.cc	/^class PrintChunkServerInfo {$/;"	c	file:
PrintChunkServerLocations	request.cc	/^	PrintChunkServerLocations(ostream &out): os(out) { }$/;"	f	class:KFS::PrintChunkServerLocations
PrintChunkServerLocations	request.cc	/^class PrintChunkServerLocations {$/;"	c	namespace:KFS	file:
ProcessPendingBeginMakeStable	LayoutManager.cc	/^LayoutManager::ProcessPendingBeginMakeStable()$/;"	f	class:LayoutManager
PutHeader	request.cc	/^PutHeader(const MetaRequest* op, ostream &os)$/;"	f	namespace:KFS
RackSetter	LayoutManager.cc	/^	RackSetter(set<int> &r, bool excludeRetiring = false) :$/;"	f	class:RackSetter
RackSetter	LayoutManager.cc	/^class RackSetter {$/;"	c	file:
RandomSeqNo	ChunkServer.cc	/^static seq_t RandomSeqNo()$/;"	f	file:
RandomSeqNo	LayoutManager.cc	/^static inline seq_t RandomSeqNo() {$/;"	f	file:
ReReplicationCheckIniter	LayoutManager.cc	/^	ReReplicationCheckIniter(CRCandidateSet &c, CRCandidateSet &p) : crset(c), prioritySet(p) { }$/;"	f	class:ReReplicationCheckIniter
ReReplicationCheckIniter	LayoutManager.cc	/^class ReReplicationCheckIniter {$/;"	c	file:
ReadMetaServerProperties	metaserver_main.cc	/^ReadMetaServerProperties(char *fileName)$/;"	f
ReallocIfNeeded	LayoutManager.cc	/^template<typename T> static T& ReallocIfNeeded(T& vec) {$/;"	f	file:
RebalancePlanExecutor	LayoutManager.cc	/^	RebalancePlanExecutor(LayoutManager *l) : mgr(l) { }$/;"	f	class:RebalancePlanExecutor
RebalancePlanExecutor	LayoutManager.cc	/^class RebalancePlanExecutor {$/;"	c	file:
RebalanceServers	LayoutManager.cc	/^LayoutManager::RebalanceServers()$/;"	f	class:LayoutManager
RebuildPriorityReplicationList	LayoutManager.cc	/^LayoutManager::RebuildPriorityReplicationList()$/;"	f	class:LayoutManager
RegisterCounters	request.cc	/^RegisterCounters()$/;"	f	namespace:KFS
RemoveChunkToServerMapping	LayoutManager.cc	/^LayoutManager::RemoveChunkToServerMapping(chunkId_t chunkId)$/;"	f	class:LayoutManager
RemoveDumpsterEntry	kfsops.cc	/^	RemoveDumpsterEntry(fid_t d) : dir(d) { }$/;"	f	class:RemoveDumpsterEntry
RemoveDumpsterEntry	kfsops.cc	/^class RemoveDumpsterEntry {$/;"	c	file:
RemoveServer	ChunkServerFactory.cc	/^ChunkServerFactory::RemoveServer(const ChunkServer *target)$/;"	f	class:ChunkServerFactory
ReplayPendingMakeStable	LayoutManager.cc	/^LayoutManager::ReplayPendingMakeStable($/;"	f	class:LayoutManager
ReplicateChunk	ChunkServer.cc	/^ChunkServer::ReplicateChunk(fid_t fid, chunkId_t chunkId, seq_t chunkVersion,$/;"	f	class:ChunkServer
ReplicateChunk	LayoutManager.cc	/^LayoutManager::ReplicateChunk(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
ReplicateChunkToServers	LayoutManager.cc	/^LayoutManager::ReplicateChunkToServers(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
ReplicationDoneNotifier	LayoutManager.cc	/^	ReplicationDoneNotifier(chunkId_t c) : cid(c) { }$/;"	f	class:ReplicationDoneNotifier
ReplicationDoneNotifier	LayoutManager.cc	/^class ReplicationDoneNotifier {$/;"	c	file:
RequestDone	LayoutManager.cc	/^ARAChunkCache::RequestDone(const MetaAllocate& req)$/;"	f	class:ARAChunkCache
RequestNew	LayoutManager.cc	/^ARAChunkCache::RequestNew(MetaAllocate& req)$/;"	f	class:ARAChunkCache
RequestStatsGatherer	ClientSM.cc	/^	RequestStatsGatherer()$/;"	f	class:RequestStatsGatherer
RequestStatsGatherer	ClientSM.cc	/^static class RequestStatsGatherer$/;"	c	file:
Restart	ChunkServer.cc	/^ChunkServer::Restart()$/;"	f	class:ChunkServer
Retire	ChunkServer.cc	/^ChunkServer::Retire()$/;"	f	class:ChunkServer
RetireServer	LayoutManager.cc	/^LayoutManager::RetireServer(const ServerLocation &loc, int downtime)$/;"	f	class:LayoutManager
RetiringServerPred	LayoutManager.cc	/^	RetiringServerPred() { }$/;"	f	class:RetiringServerPred
RetiringServerPred	LayoutManager.cc	/^class RetiringServerPred {$/;"	c	file:
RetiringStatus	LayoutManager.cc	/^	RetiringStatus(string &r):result(r) { }$/;"	f	class:RetiringStatus
RetiringStatus	LayoutManager.cc	/^class RetiringStatus {$/;"	c	file:
ScheduleChunkServersRestart	LayoutManager.cc	/^void LayoutManager::ScheduleChunkServersRestart()$/;"	f	class:LayoutManager
ScheduleRestart	ChunkServer.cc	/^ChunkServer::ScheduleRestart(int64_t gracefulRestartTimeout, int64_t gracefulRestartAppendWithWidTimeout)$/;"	f	class:ChunkServer
SendResponse	ChunkServer.cc	/^ChunkServer::SendResponse(MetaChunkRequest *op)$/;"	f	class:ChunkServer
SendResponse	ClientSM.cc	/^ClientSM::SendResponse(MetaRequest *op)$/;"	f	class:ClientSM
ServerDown	LayoutManager.cc	/^LayoutManager::ServerDown(ChunkServer *server)$/;"	f	class:LayoutManager
ServerSpace	LayoutManager.cc	/^struct ServerSpace {$/;"	s	file:
ServerSpaceUtil	LayoutManager.cc	/^struct ServerSpaceUtil {$/;"	s	file:
SetChunkServersProperties	LayoutManager.cc	/^LayoutManager::SetChunkServersProperties(const Properties& props)$/;"	f	class:LayoutManager
SetParameters	ChunkServer.cc	/^void ChunkServer::SetParameters(const Properties& prop)$/;"	f	class:ChunkServer
SetParameters	ClientSM.cc	/^ClientSM::SetParameters(const Properties& prop)$/;"	f	class:ClientSM
SetParameters	LayoutManager.cc	/^LayoutManager::SetParameters(const Properties& props)$/;"	f	class:LayoutManager
SetProperties	ChunkServer.cc	/^ChunkServer::SetProperties(const Properties& props)$/;"	f	class:ChunkServer
SetRetiring	ChunkServer.cc	/^ChunkServer::SetRetiring()$/;"	f	class:ChunkServer
Show	request.cc	/^MetaAllocate::Show() const$/;"	f	class:KFS::MetaAllocate
Show	request.cc	/^MetaChunkMakeStable::Show() const$/;"	f	class:KFS::MetaChunkMakeStable
SortServersByUtilization	LayoutManager.cc	/^LayoutManager::SortServersByUtilization(vector<ChunkServerPtr> &servers)$/;"	f	class:LayoutManager
Start	NetDispatch.cc	/^NetDispatch::Start(int clientAcceptPort, int chunkServerAcceptPort)$/;"	f	class:NetDispatch
SubmitOp	ClientSM.cc	/^ClientSM::SubmitOp()$/;"	f	class:ClientSM
TimeNow	ChunkServer.cc	/^static inline time_t TimeNow()$/;"	f	file:
TimeNow	LayoutManager.cc	/^static inline time_t TimeNow() {$/;"	f	file:
TimeNow	kfsops.cc	/^static inline time_t TimeNow()$/;"	f	file:
TimeSinceLastHeartbeat	ChunkServer.cc	/^ChunkServer::TimeSinceLastHeartbeat() const$/;"	f	class:ChunkServer
Timeout	ChildProcessTracker.cc	/^void ChildProcessTrackingTimer::Timeout()$/;"	f	class:KFS::ChildProcessTrackingTimer
Timeout	LayoutManager.cc	/^ARAChunkCache::Timeout(time_t minTime)$/;"	f	class:ARAChunkCache
Timeout	logger.cc	/^LogRotater::Timeout()$/;"	f	class:LogRotater
ToString	LayoutManager.cc	/^KFS::ToString(const CSCounters& cntrs, string rowDelim)$/;"	f	class:KFS
Track	ChildProcessTracker.cc	/^void ChildProcessTrackingTimer::Track(pid_t pid, MetaRequest *r)$/;"	f	class:KFS::ChildProcessTrackingTimer
TruncateChunk	ChunkServer.cc	/^ChunkServer::TruncateChunk(chunkId_t chunkId, off_t s)$/;"	f	class:ChunkServer
TruncateChunk	LayoutManager.cc	/^LayoutManager::TruncateChunk(chunkId_t chunkId, off_t sz)$/;"	f	class:LayoutManager
TruncateChunk	meta.cc	/^MetaChunkInfo::TruncateChunk(off_t s)$/;"	f	class:MetaChunkInfo
Truncator	LayoutManager.cc	/^    Truncator(chunkId_t c, off_t s) : chunkId(c), sz(s) { }$/;"	f	class:Truncator
Truncator	LayoutManager.cc	/^class Truncator {$/;"	c	file:
UpServers	LayoutManager.cc	/^LayoutManager::UpServers(ostringstream &os)$/;"	f	class:LayoutManager
UpServersList	LayoutManager.cc	/^	UpServersList(ostringstream &os): os(os) { }$/;"	f	class:UpServersList
UpServersList	LayoutManager.cc	/^class UpServersList {$/;"	c	file:
UpdateChunkToServerMapping	LayoutManager.cc	/^LayoutManager::UpdateChunkToServerMapping(chunkId_t chunkId, ChunkServer *c)$/;"	f	class:LayoutManager
UpdateCounter	request.cc	/^UpdateCounter(MetaOp opName)$/;"	f	namespace:KFS
UpdateNumChunks	request.cc	/^UpdateNumChunks(int count)$/;"	f	namespace:KFS
UpdateNumDirs	request.cc	/^UpdateNumDirs(int count)$/;"	f	namespace:KFS
UpdateNumFiles	request.cc	/^UpdateNumFiles(int count)$/;"	f	namespace:KFS
UptimeLess	LayoutManager.cc	/^struct UptimeLess :$/;"	s	file:
ValidLeaseIssued	LayoutManager.cc	/^	ValidLeaseIssued(const CSMap &m) : chunkToServerMap(m) { }$/;"	f	class:ValidLeaseIssued
ValidLeaseIssued	LayoutManager.cc	/^class ValidLeaseIssued {$/;"	c	file:
ValidServer	LayoutManager.cc	/^LayoutManager::ValidServer(ChunkServer *c)$/;"	f	class:LayoutManager
WritePendingMakeStable	LayoutManager.cc	/^LayoutManager::WritePendingMakeStable(ostream& os) const$/;"	f	class:LayoutManager
absolute	kfsops.cc	/^absolute(const string path)$/;"	f	file:
absorb	kfstree.cc	/^Node::absorb(Node *l)$/;"	f	class:Node
acquire_lockfile	restore.cc	/^KFS::acquire_lockfile(const string &lockfn, int ntries)$/;"	f	class:KFS
addChild	kfstree.cc	/^Node::addChild(Key *k, MetaNode *child, int pos)$/;"	f	class:Node
allocateChunkId	kfsops.cc	/^Tree::allocateChunkId(fid_t file, chunkOff_t &offset, chunkId_t *chunkId,$/;"	f	class:Tree
araChunkCache	LayoutManager.cc	/^        ARAChunkCache&           araChunkCache;$/;"	m	class:MapPurger	file:
assignChunkId	kfsops.cc	/^Tree::assignChunkId(fid_t file, chunkOff_t offset,$/;"	f	class:Tree
availSpace	LayoutManager.cc	/^	uint64_t availSpace;$/;"	m	struct:ServerSpace	file:
balanceNeighbor	kfstree.cc	/^Node::balanceNeighbor(int pos)$/;"	f	class:Node
candidates	LayoutManager.cc	/^	ReplicationCandidates &candidates;$/;"	m	class:EvacuateChunkChecker	file:
changeDirReplication	kfsops.cc	/^Tree::changeDirReplication(MetaFattr *dirattr, int16_t numReplicas)$/;"	f	class:Tree
changeFileReplication	kfsops.cc	/^Tree::changeFileReplication(MetaFattr *fa, int16_t numReplicas)$/;"	f	class:Tree
changePathReplication	kfsops.cc	/^Tree::changePathReplication(fid_t fid, int16_t numReplicas)$/;"	f	class:Tree
checkpoint_chunkId	restore.cc	/^checkpoint_chunkId(deque <string> &c)$/;"	f	file:
checkpoint_fid	restore.cc	/^checkpoint_fid(deque <string> &c)$/;"	f	file:
checkpoint_log	restore.cc	/^checkpoint_log(deque <string> &c)$/;"	f	file:
checkpoint_seq	restore.cc	/^checkpoint_seq(deque <string> &c)$/;"	f	file:
checkpoint_time	restore.cc	/^checkpoint_time(deque <string> &c)$/;"	f	file:
checkpoint_version	restore.cc	/^checkpoint_version(deque <string> &c)$/;"	f	file:
checkpointer_init	checkpoint.cc	/^KFS::checkpointer_init()$/;"	f	class:KFS
checkpointer_setup_paths	checkpoint.cc	/^KFS::checkpointer_setup_paths(const string &cpdir)$/;"	f	class:KFS
chunkChecksum	LayoutManager.cc	/^        const uint32_t  chunkChecksum;$/;"	m	class:MakeChunkStable	file:
chunkId	LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:BeginMakeChunkStable	file:
chunkId	LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:ChunkDeletor	file:
chunkId	LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:DecChunkWriteCount	file:
chunkId	LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:MakeChunkStable	file:
chunkId	LayoutManager.cc	/^    chunkId_t chunkId;$/;"	m	class:Truncator	file:
chunkId	request.cc	/^	chunkId_t chunkId;$/;"	m	class:KFS::ChunkVersionChanger	file:
chunkMap	LayoutManager.cc	/^	const CSMap&    chunkMap;$/;"	m	class:DecChunkWriteCount	file:
chunkSize	LayoutManager.cc	/^        const off_t     chunkSize;$/;"	m	class:MakeChunkStable	file:
chunkStartOffset	util.cc	/^KFS::chunkStartOffset(chunkOff_t offset)$/;"	f	class:KFS
chunkToServerMap	LayoutManager.cc	/^	CSMap &chunkToServerMap;$/;"	m	class:EvacuateChunkChecker	file:
chunkToServerMap	LayoutManager.cc	/^	const CSMap &chunkToServerMap;$/;"	m	class:ValidLeaseIssued	file:
chunkVers	request.cc	/^	seq_t chunkVers;$/;"	m	class:KFS::ChunkVersionChanger	file:
chunkVersion	LayoutManager.cc	/^	const seq_t     chunkVersion;$/;"	m	class:BeginMakeChunkStable	file:
chunkVersion	LayoutManager.cc	/^	const seq_t     chunkVersion;$/;"	m	class:MakeChunkStable	file:
chunkVersionInc	meta.cc	/^seq_t KFS::chunkVersionInc = 0;$/;"	m	class:KFS	file:
cid	LayoutManager.cc	/^	chunkId_t cid;$/;"	m	class:ReplicationDoneNotifier	file:
cleanupDumpster	kfsops.cc	/^Tree::cleanupDumpster()$/;"	f	class:Tree
cleanupPathToFidCache	kfsops.cc	/^Tree::cleanupPathToFidCache()$/;"	f	class:Tree
closeHole	kfstree.cc	/^Node::closeHole(int pos, int skip)$/;"	f	class:Node
coalesceBlocks	kfsops.cc	/^Tree::coalesceBlocks(MetaFattr* srcFa, MetaFattr* dstFa, $/;"	f	class:Tree
coalesceBlocks	kfsops.cc	/^Tree::coalesceBlocks(const std::string &srcPath, const std::string &dstPath, $/;"	f	class:Tree
compare	meta.cc	/^Key::compare(const Key &test) const$/;"	f	class:Key
create	kfsops.cc	/^Tree::create(fid_t dir, const string &fname, fid_t *newFid,$/;"	f	class:Tree
crset	LayoutManager.cc	/^	CRCandidateSet &crset;$/;"	m	class:ReReplicationCheckIniter	file:
crset	LayoutManager.cc	/^	ReplicationCandidates &crset;$/;"	m	class:MapRetirer	file:
crset	LayoutManager.cc	/^	ReplicationCandidates&   crset;$/;"	m	class:MapPurger	file:
del	kfstree.cc	/^Tree::del(Meta *m)$/;"	f	class:Tree
dir	kfsops.cc	/^	fid_t dir;$/;"	m	class:RemoveDumpsterEntry	file:
dispatch	logger.cc	/^Logger::dispatch(MetaRequest *r)$/;"	f	class:Logger
do_CP	checkpoint.cc	/^Checkpoint::do_CP()$/;"	f	class:Checkpoint
emptyDumpsterDir	kfsops.cc	/^KFS::emptyDumpsterDir()$/;"	f	class:KFS
emptydir	kfsops.cc	/^Tree::emptydir(fid_t dir)$/;"	f	class:Tree
errCode	ChunkServer.cc	/^	const int errCode;$/;"	m	class:OpFailer	file:
excludeRetiringServers	LayoutManager.cc	/^	bool excludeRetiringServers;$/;"	m	class:RackSetter	file:
expire	LayoutManager.cc	/^	const time_t              expire;$/;"	m	struct:ExpireLeaseIfOwner	file:
fid	LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:BeginMakeChunkStable	file:
fid	LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:DecChunkWriteCount	file:
fid	LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:MakeChunkStable	file:
fid	request.cc	/^	fid_t fid;$/;"	m	class:KFS::ChunkVersionChanger	file:
file_exists	request.cc	/^file_exists(fid_t fid)$/;"	f	namespace:KFS
file_exists	util.cc	/^KFS::file_exists(string name)$/;"	f	class:KFS
findLeaf	kfstree.cc	/^Tree::findLeaf(const Key &k) const$/;"	f	class:Tree
finishLog	logger.cc	/^Logger::finishLog()$/;"	f	class:Logger
flushLog	logger.cc	/^Logger::flushLog()$/;"	f	class:Logger
flushResult	logger.cc	/^Logger::flushResult(MetaRequest *r)$/;"	f	class:Logger
gCPDir	metaserver_main.cc	/^string gLogDir, gCPDir;$/;"	v
gChildProcessTracker	ChildProcessTracker.cc	/^ChildProcessTrackingTimer gChildProcessTracker;$/;"	m	namespace:KFS	file:
gChunkServerPort	metaserver_main.cc	/^int gChunkServerPort;$/;"	v
gChunkmapDumpDir	request.cc	/^static string gChunkmapDumpDir = ".";$/;"	m	namespace:KFS	file:
gClientPort	metaserver_main.cc	/^int gClientPort;$/;"	v
gClusterKey	request.cc	/^string gClusterKey;$/;"	m	namespace:KFS	file:
gCounters	request.cc	/^OpCounterMap gCounters;$/;"	m	namespace:KFS	file:
gCurrFa	restore.cc	/^MetaFattr *gCurrFa = NULL;$/;"	v
gIsPathToFidCacheEnabled	metaserver_main.cc	/^bool gIsPathToFidCacheEnabled = false;$/;"	v
gLogDir	metaserver_main.cc	/^string gLogDir, gCPDir;$/;"	v
gMD5SumFn	request.cc	/^string gMD5SumFn;$/;"	m	namespace:KFS	file:
gMaxReplicasPerFile	request.cc	/^static int16_t gMaxReplicasPerFile = MAX_REPLICAS_PER_FILE;$/;"	m	namespace:KFS	file:
gMinChunkservers	metaserver_main.cc	/^uint32_t gMinChunkservers;$/;"	v
gMinReplicasPerFile	metaserver_main.cc	/^int16_t gMinReplicasPerFile;$/;"	v
gNumChunks	request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gNumDirs	request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gNumFiles	request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gParseHandlers	request.cc	/^ParseHandlerMap gParseHandlers;$/;"	m	namespace:KFS	file:
gPathToFidCacheHit	request.cc	/^Counter *gPathToFidCacheHit, *gPathToFidCacheMiss;$/;"	m	namespace:KFS	file:
gPathToFidCacheMiss	request.cc	/^Counter *gPathToFidCacheHit, *gPathToFidCacheMiss;$/;"	m	namespace:KFS	file:
gProp	metaserver_main.cc	/^Properties gProp;$/;"	v
gWormMode	request.cc	/^bool gWormMode = false;$/;"	m	namespace:KFS	file:
getChunkVersion	kfsops.cc	/^Tree::getChunkVersion(fid_t file, chunkId_t chunkId, seq_t *chunkVersion)$/;"	f	class:Tree
getDentry	kfsops.cc	/^Tree::getDentry(fid_t dir, const string &fname)$/;"	f	class:Tree
getDentry	kfsops.cc	/^Tree::getDentry(fid_t fid)$/;"	f	class:Tree
getFattr	kfsops.cc	/^Tree::getFattr(fid_t fid)$/;"	f	class:Tree
getFileIds	kfsfsck_main.cc	/^getFileIds(set<fid_t> &fileids, Properties &prop, string key, string value)$/;"	f
getFsckInfo	kfsfsck_main.cc	/^void getFsckInfo(string metahost, int metaport, $/;"	f
getInstance	handler.cc	/^zinc_handler::getInstance()	{$/;"	f	class:zinc_handler
getPathname	kfsops.cc	/^Tree::getPathname(fid_t fid)$/;"	f	class:Tree
getResponse	kfsfsck_main.cc	/^getResponse(char *buf, int bufSize,$/;"	f	file:
getalloc	kfsops.cc	/^Tree::getalloc(fid_t file, chunkOff_t offset, MetaChunkInfo **c)$/;"	f	class:Tree
getalloc	kfsops.cc	/^Tree::getalloc(fid_t file, vector <MetaChunkInfo *> &v)$/;"	f	class:Tree
handle	request.cc	/^MetaAllocate::handle()$/;"	f	class:KFS::MetaAllocate
handle	request.cc	/^MetaBeginMakeChunkStable::handle()$/;"	f	class:KFS::MetaBeginMakeChunkStable
handle	request.cc	/^MetaBye::handle()$/;"	f	class:KFS::MetaBye
handle	request.cc	/^MetaChangeChunkVersionInc::handle()$/;"	f	class:KFS::MetaChangeChunkVersionInc
handle	request.cc	/^MetaChangeFileReplication::handle()$/;"	f	class:KFS::MetaChangeFileReplication
handle	request.cc	/^MetaCheckLeases::handle()$/;"	f	class:KFS::MetaCheckLeases
handle	request.cc	/^MetaChunkCorrupt::handle()$/;"	f	class:KFS::MetaChunkCorrupt
handle	request.cc	/^MetaChunkMakeStable::handle()$/;"	f	class:KFS::MetaChunkMakeStable
handle	request.cc	/^MetaChunkReplicate::handle()$/;"	f	class:KFS::MetaChunkReplicate
handle	request.cc	/^MetaChunkReplicationCheck::handle()$/;"	f	class:KFS::MetaChunkReplicationCheck
handle	request.cc	/^MetaChunkSize::handle()$/;"	f	class:KFS::MetaChunkSize
handle	request.cc	/^MetaCoalesceBlocks::handle()$/;"	f	class:KFS::MetaCoalesceBlocks
handle	request.cc	/^MetaCreate::handle()$/;"	f	class:KFS::MetaCreate
handle	request.cc	/^MetaDumpChunkReplicationCandidates::handle()$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
handle	request.cc	/^MetaDumpChunkToServerMap::handle()$/;"	f	class:KFS::MetaDumpChunkToServerMap
handle	request.cc	/^MetaExecuteRebalancePlan::handle()$/;"	f	class:KFS::MetaExecuteRebalancePlan
handle	request.cc	/^MetaFsck::handle()$/;"	f	class:KFS::MetaFsck
handle	request.cc	/^MetaGetChunkServersCounters::handle()$/;"	f	class:KFS::MetaGetChunkServersCounters
handle	request.cc	/^MetaGetalloc::handle()$/;"	f	class:KFS::MetaGetalloc
handle	request.cc	/^MetaGetlayout::handle()$/;"	f	class:KFS::MetaGetlayout
handle	request.cc	/^MetaHello::handle()$/;"	f	class:KFS::MetaHello
handle	request.cc	/^MetaLeaseAcquire::handle()$/;"	f	class:KFS::MetaLeaseAcquire
handle	request.cc	/^MetaLeaseCleanup::handle()$/;"	f	class:KFS::MetaLeaseCleanup
handle	request.cc	/^MetaLeaseRelinquish::handle()$/;"	f	class:KFS::MetaLeaseRelinquish
handle	request.cc	/^MetaLeaseRenew::handle()$/;"	f	class:KFS::MetaLeaseRenew
handle	request.cc	/^MetaLookup::handle()$/;"	f	class:KFS::MetaLookup
handle	request.cc	/^MetaLookupPath::handle()$/;"	f	class:KFS::MetaLookupPath
handle	request.cc	/^MetaMkdir::handle()$/;"	f	class:KFS::MetaMkdir
handle	request.cc	/^MetaOpenFiles::handle()$/;"	f	class:KFS::MetaOpenFiles
handle	request.cc	/^MetaPing::handle()$/;"	f	class:KFS::MetaPing
handle	request.cc	/^MetaReadConfig::handle()$/;"	f	class:KFS::MetaReadConfig
handle	request.cc	/^MetaReaddir::handle()$/;"	f	class:KFS::MetaReaddir
handle	request.cc	/^MetaReaddirPlus::handle()$/;"	f	class:KFS::MetaReaddirPlus
handle	request.cc	/^MetaRecomputeDirsize::handle()$/;"	f	class:KFS::MetaRecomputeDirsize
handle	request.cc	/^MetaRemove::handle()$/;"	f	class:KFS::MetaRemove
handle	request.cc	/^MetaRename::handle()$/;"	f	class:KFS::MetaRename
handle	request.cc	/^MetaRequest::handle()$/;"	f	class:KFS::MetaRequest
handle	request.cc	/^MetaRetireChunkserver::handle()$/;"	f	class:KFS::MetaRetireChunkserver
handle	request.cc	/^MetaRmdir::handle()$/;"	f	class:KFS::MetaRmdir
handle	request.cc	/^MetaSetChunkServersProperties::handle()$/;"	f	class:KFS::MetaSetChunkServersProperties
handle	request.cc	/^MetaSetMtime::handle()$/;"	f	class:KFS::MetaSetMtime
handle	request.cc	/^MetaStats::handle()$/;"	f	class:KFS::MetaStats
handle	request.cc	/^MetaToggleRebalancing::handle()$/;"	f	class:KFS::MetaToggleRebalancing
handle	request.cc	/^MetaToggleWORM::handle()$/;"	f	class:KFS::MetaToggleWORM
handle	request.cc	/^MetaTruncate::handle()$/;"	f	class:KFS::MetaTruncate
handle	request.cc	/^MetaUpServers::handle()$/;"	f	class:KFS::MetaUpServers
handler	handler.cc	/^zinc_handler* zinc_handler::handler = NULL;$/;"	m	class:zinc_handler	file:
hasChunkChecksum	LayoutManager.cc	/^        const bool      hasChunkChecksum;$/;"	m	class:MakeChunkStable	file:
host	LayoutManager.cc	/^	string host;$/;"	m	class:MatchServerByHost	file:
init_map	replay.cc	/^init_map(DiskEntry &e)$/;"	f	file:
init_map	restore.cc	/^init_map(DiskEntry &e)$/;"	f	file:
initial_CP	checkpoint.cc	/^Checkpoint::initial_CP()$/;"	f	class:Checkpoint
initialize_request_handlers	request.cc	/^initialize_request_handlers()$/;"	f	namespace:KFS
insert	kfstree.cc	/^Tree::insert(Meta *item)$/;"	f	class:Tree
insertChildren	kfstree.cc	/^Node::insertChildren(Node *dest, int start, int n)$/;"	f	class:Node
insertData	kfstree.cc	/^Node::insertData(Key *k, Meta *item, int pos)$/;"	f	class:Node
isValidMD5Sum	request.cc	/^isValidMD5Sum(const string &md5sum)$/;"	f	namespace:KFS
isWormMutationAllowed	request.cc	/^isWormMutationAllowed(const string &pathname)$/;"	f	namespace:KFS
is_descendant	kfsops.cc	/^Tree::is_descendant(fid_t src, fid_t dst)$/;"	f	class:Tree
is_dir	request.cc	/^is_dir(fid_t fid)$/;"	f	namespace:KFS
kMaxReadAhead	ChunkServer.cc	/^const int kMaxReadAhead             = 4 << 10;$/;"	v
kMaxRequestResponseHeader	ChunkServer.cc	/^const int kMaxRequestResponseHeader = 64 << 10;$/;"	v
kOtherReqId	ClientSM.cc	/^		kOtherReqId        = META_NUM_OPS_COUNT + 1,$/;"	e	enum:RequestStatsGatherer::__anon2	file:
kReqTypeAllocNoLog	ClientSM.cc	/^		kReqTypeAllocNoLog = kOtherReqId + 1,$/;"	e	enum:RequestStatsGatherer::__anon2	file:
kReqTypesCnt	ClientSM.cc	/^		kReqTypesCnt       = kReqTypeAllocNoLog + 1$/;"	e	enum:RequestStatsGatherer::__anon2	file:
kStatsIntervalSec	ClientSM.cc	/^	enum { kStatsIntervalSec = 20 };$/;"	e	enum:RequestStatsGatherer::__anon1	file:
kfs_startup	startup.cc	/^KFS::kfs_startup(const string &logdir, const string &cpdir, $/;"	f	class:KFS
legalname	kfsops.cc	/^legalname(const string name)$/;"	f	file:
lib_ext	handler.cc	/^const std::string zinc_handler::lib_ext = ".so";$/;"	m	class:zinc_handler	file:
link	kfsops.cc	/^Tree::link(fid_t dir, const string fname, FileType type, fid_t myID, int16_t numReplicas, string optional_handler)$/;"	f	class:Tree
link_latest	util.cc	/^KFS::link_latest(const string realname, const string alias)$/;"	f	class:KFS
listPaths	kfsops.cc	/^Tree::listPaths(ostream &ofs)$/;"	f	class:Tree
listPaths	kfsops.cc	/^Tree::listPaths(ostream &ofs, set<fid_t> specificIds)$/;"	f	class:Tree
listPaths	kfsops.cc	/^Tree::listPaths(ostream &ofs, string parent, fid_t dir, set<fid_t> specificIds)$/;"	f	class:Tree
loadEstimate	LayoutManager.cc	/^	uint32_t loadEstimate;$/;"	m	struct:ServerSpace	file:
loc	LayoutManager.cc	/^	const ServerLocation loc;$/;"	m	class:MatchingServer	file:
log	logger.cc	/^Logger::log(MetaRequest *r)$/;"	f	class:Logger
log	request.cc	/^MetaAllocate::log(ofstream &file) const$/;"	f	class:KFS::MetaAllocate
log	request.cc	/^MetaBye::log(ofstream &file) const$/;"	f	class:KFS::MetaBye
log	request.cc	/^MetaChangeChunkVersionInc::log(ofstream &file) const$/;"	f	class:KFS::MetaChangeChunkVersionInc
log	request.cc	/^MetaChangeFileReplication::log(ofstream &file) const$/;"	f	class:KFS::MetaChangeFileReplication
log	request.cc	/^MetaCheckLeases::log(ofstream &file) const$/;"	f	class:KFS::MetaCheckLeases
log	request.cc	/^MetaChunkCorrupt::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkCorrupt
log	request.cc	/^MetaChunkReplicationCheck::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkReplicationCheck
log	request.cc	/^MetaChunkSize::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkSize
log	request.cc	/^MetaCoalesceBlocks::log(ofstream &file) const$/;"	f	class:KFS::MetaCoalesceBlocks
log	request.cc	/^MetaCreate::log(ofstream &file) const$/;"	f	class:KFS::MetaCreate
log	request.cc	/^MetaDumpChunkReplicationCandidates::log(ofstream &file) const$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
log	request.cc	/^MetaDumpChunkToServerMap::log(ofstream &file) const$/;"	f	class:KFS::MetaDumpChunkToServerMap
log	request.cc	/^MetaExecuteRebalancePlan::log(ofstream &file) const$/;"	f	class:KFS::MetaExecuteRebalancePlan
log	request.cc	/^MetaFsck::log(ofstream &file) const$/;"	f	class:KFS::MetaFsck
log	request.cc	/^MetaGetChunkServersCounters::log(ofstream & \/* file *\/) const$/;"	f	class:KFS::MetaGetChunkServersCounters
log	request.cc	/^MetaGetalloc::log(ofstream &file) const$/;"	f	class:KFS::MetaGetalloc
log	request.cc	/^MetaGetlayout::log(ofstream &file) const$/;"	f	class:KFS::MetaGetlayout
log	request.cc	/^MetaHello::log(ofstream &file) const$/;"	f	class:KFS::MetaHello
log	request.cc	/^MetaLeaseAcquire::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseAcquire
log	request.cc	/^MetaLeaseCleanup::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseCleanup
log	request.cc	/^MetaLeaseRelinquish::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseRelinquish
log	request.cc	/^MetaLeaseRenew::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseRenew
log	request.cc	/^MetaLogMakeChunkStable::log(ofstream &file) const$/;"	f	class:KFS::MetaLogMakeChunkStable
log	request.cc	/^MetaLookup::log(ofstream &file) const$/;"	f	class:KFS::MetaLookup
log	request.cc	/^MetaLookupPath::log(ofstream &file) const$/;"	f	class:KFS::MetaLookupPath
log	request.cc	/^MetaMkdir::log(ofstream &file) const$/;"	f	class:KFS::MetaMkdir
log	request.cc	/^MetaOpenFiles::log(ofstream &file) const$/;"	f	class:KFS::MetaOpenFiles
log	request.cc	/^MetaPing::log(ofstream &file) const$/;"	f	class:KFS::MetaPing
log	request.cc	/^MetaReadConfig::log(ofstream &file) const$/;"	f	class:KFS::MetaReadConfig
log	request.cc	/^MetaReaddir::log(ofstream &file) const$/;"	f	class:KFS::MetaReaddir
log	request.cc	/^MetaReaddirPlus::log(ofstream &file) const$/;"	f	class:KFS::MetaReaddirPlus
log	request.cc	/^MetaRecomputeDirsize::log(ofstream &file) const$/;"	f	class:KFS::MetaRecomputeDirsize
log	request.cc	/^MetaRemove::log(ofstream &file) const$/;"	f	class:KFS::MetaRemove
log	request.cc	/^MetaRename::log(ofstream &file) const$/;"	f	class:KFS::MetaRename
log	request.cc	/^MetaRetireChunkserver::log(ofstream &file) const$/;"	f	class:KFS::MetaRetireChunkserver
log	request.cc	/^MetaRmdir::log(ofstream &file) const$/;"	f	class:KFS::MetaRmdir
log	request.cc	/^MetaSetChunkServersProperties::log(ofstream & \/* file *\/) const$/;"	f	class:KFS::MetaSetChunkServersProperties
log	request.cc	/^MetaSetMtime::log(ofstream &file) const$/;"	f	class:KFS::MetaSetMtime
log	request.cc	/^MetaStats::log(ofstream &file) const$/;"	f	class:KFS::MetaStats
log	request.cc	/^MetaToggleRebalancing::log(ofstream &file) const$/;"	f	class:KFS::MetaToggleRebalancing
log	request.cc	/^MetaToggleWORM::log(ofstream &file) const$/;"	f	class:KFS::MetaToggleWORM
log	request.cc	/^MetaTruncate::log(ofstream &file) const$/;"	f	class:KFS::MetaTruncate
log	request.cc	/^MetaUpServers::log(ofstream &file) const$/;"	f	class:KFS::MetaUpServers
logDone	request.cc	/^MetaLogMakeChunkStable::logDone(int code, void *data)$/;"	f	class:KFS::MetaLogMakeChunkStable
logRotater	logger.cc	/^static KFS::LogRotater logRotater;$/;"	v	file:
logger_init	logger.cc	/^KFS::logger_init()$/;"	f	class:KFS
logger_setup_paths	logger.cc	/^KFS::logger_setup_paths(const string &logdir)$/;"	f	class:KFS
lookup	kfsops.cc	/^Tree::lookup(fid_t dir, const string &fname)$/;"	f	class:Tree
lookupPath	kfsops.cc	/^Tree::lookupPath(fid_t rootdir, const string &path)$/;"	f	class:Tree
mBufferPool	metaserver_main.cc	/^    QCIoBufferPool mBufferPool;$/;"	m	class:BufferAllocator	file:
mCnt	ClientSM.cc	/^		int64_t mCnt;$/;"	m	struct:RequestStatsGatherer::Counter	file:
mErr	ClientSM.cc	/^		int64_t mErr;$/;"	m	struct:RequestStatsGatherer::Counter	file:
mNextTime	ClientSM.cc	/^	time_t  mNextTime;$/;"	m	class:RequestStatsGatherer	file:
mRequest	ClientSM.cc	/^	Counter mRequest[kReqTypesCnt];$/;"	m	class:RequestStatsGatherer	file:
mTotal	ClientSM.cc	/^	Counter mTotal;$/;"	m	class:RequestStatsGatherer	file:
main	filelister_main.cc	/^int main(int argc, char **argv)$/;"	f
main	kfsfsck_main.cc	/^int main(int argc, char **argv)$/;"	f
main	logcompactor_main.cc	/^int main(int argc, char **argv)$/;"	f
main	metaserver_main.cc	/^main(int argc, char **argv)$/;"	f
main	restoremtime_main.cc	/^int main(int argc, char **argv)$/;"	f
makeDumpsterDir	kfsops.cc	/^KFS::makeDumpsterDir()$/;"	f	class:KFS
makename	util.cc	/^KFS::makename(const string dir, const string prefix, int number)$/;"	f	class:KFS
match	meta.cc	/^MetaDentry::match(Meta *m)$/;"	f	class:MetaDentry
max	kfsops.cc	/^struct timeval& max(struct timeval &a, struct timeval &b)$/;"	f
maxServerSpaceUtilThreshold	LayoutManager.cc	/^	double maxServerSpaceUtilThreshold;$/;"	m	class:LoadedServerPred	file:
mergeNeighbor	kfstree.cc	/^Node::mergeNeighbor(int pos)$/;"	f	class:Node
mgr	LayoutManager.cc	/^	LayoutManager *mgr;$/;"	m	class:RebalancePlanExecutor	file:
mkdir	kfsops.cc	/^Tree::mkdir(fid_t dir, const string &dname, fid_t *newFid)$/;"	f	class:Tree
moveChildren	kfstree.cc	/^Node::moveChildren(Node *dest, int start, int n)$/;"	f	class:Node
moveToDumpster	kfsops.cc	/^Tree::moveToDumpster(fid_t dir, const string &fname)$/;"	f	class:Tree
myid	LayoutManager.cc	/^	chunkId_t myid;$/;"	m	class:ChunkIdMatcher	file:
myid	LayoutManager.cc	/^	const int64_t myid;$/;"	m	class:LeaseIdMatcher	file:
myid	kfsops.cc	/^	chunkId_t myid;$/;"	m	class:ChunkIdMatch	file:
myseq	ChunkServer.cc	/^	const seq_t myseq;$/;"	m	class:OpMatch	file:
now	LayoutManager.cc	/^	time_t now;$/;"	m	class:LeaseExpired	file:
ofs	LayoutManager.cc	/^	ofstream &ofs;$/;"	m	class:MapDumper	file:
ofs	LayoutManager.cc	/^	ofstream &ofs;$/;"	m	class:PrintChunkServerInfo	file:
ofs	LayoutManager.cc	/^	ostringstream &ofs;$/;"	m	class:MapDumperStream	file:
openHole	kfstree.cc	/^Node::openHole(int pos, int skip)$/;"	f	class:Node
openlog	replay.cc	/^Replay::openlog(const string &p)$/;"	f	class:Replay
operator ()	ChunkServer.cc	/^	bool operator() (const MetaChunkRequest *r) {$/;"	f	class:OpMatch
operator ()	ChunkServer.cc	/^	void operator() (MetaChunkRequest *op) {$/;"	f	class:OpFailer
operator ()	LayoutManager.cc	/^	bool operator () (const LeaseInfo &l) { return now >= l.expires; }$/;"	f	class:LeaseExpired
operator ()	LayoutManager.cc	/^	bool operator() (ChunkServerPtr &s) {$/;"	f	class:MatchServerByHost
operator ()	LayoutManager.cc	/^	bool operator() (MetaChunkInfo *c) {$/;"	f	class:ChunkIdMatcher
operator ()	LayoutManager.cc	/^	bool operator() (MetaChunkInfo *c) {$/;"	f	class:ValidLeaseIssued
operator ()	LayoutManager.cc	/^	bool operator() (const ChunkServerPtr &s) {$/;"	f	class:MatchingServer
operator ()	LayoutManager.cc	/^	bool operator() (const ChunkServerPtr& lhs, ChunkServerPtr& rhs) const {$/;"	f	struct:UptimeLess
operator ()	LayoutManager.cc	/^	bool operator() (const LeaseInfo &l) {$/;"	f	class:LeaseIdMatcher
operator ()	LayoutManager.cc	/^	bool operator()(const ChunkServerPtr &c) {$/;"	f	class:RetiringServerPred
operator ()	LayoutManager.cc	/^	bool operator()(const ChunkServerPtr &s) const {$/;"	f	class:LoadedServerPred
operator ()	LayoutManager.cc	/^	void operator () (CSMap::value_type& p) {$/;"	f	class:MapPurger
operator ()	LayoutManager.cc	/^	void operator () (ChunkServerPtr &c) { c->GetRetiringStatus(result); }$/;"	f	class:RetiringStatus
operator ()	LayoutManager.cc	/^	void operator () (ChunkServerPtr &c)$/;"	f	class:Pinger
operator ()	LayoutManager.cc	/^	void operator () (LeaseInfo& li) {$/;"	f	struct:ExpireLeaseIfOwner
operator ()	LayoutManager.cc	/^	void operator () (const CSMap::value_type p) {$/;"	f	class:ReReplicationCheckIniter
operator ()	LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapDumper
operator ()	LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapDumperStream
operator ()	LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapRetirer
operator ()	LayoutManager.cc	/^	void operator () (const ChunkServerPtr &c) {$/;"	f	class:ChunkDeletor
operator ()	LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:Dispatcher
operator ()	LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:Heartbeater
operator ()	LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:PrintChunkServerInfo
operator ()	LayoutManager.cc	/^	void operator() (const CSMap::value_type& p) {$/;"	f	class:OpenFileChecker
operator ()	LayoutManager.cc	/^	void operator() (const ChunkServerPtr &c) const {$/;"	f	class:MakeChunkStable
operator ()	LayoutManager.cc	/^	void operator() (const LeaseInfo &l) {$/;"	f	class:DecChunkWriteCount
operator ()	LayoutManager.cc	/^	void operator()(ChunkServerPtr &c) {$/;"	f	class:RebalancePlanExecutor
operator ()	LayoutManager.cc	/^	void operator()(ChunkServerPtr &s) {$/;"	f	class:ReplicationDoneNotifier
operator ()	LayoutManager.cc	/^	void operator()(ChunkServerPtr c) {$/;"	f	class:EvacuateChunkChecker
operator ()	LayoutManager.cc	/^	void operator()(const ChunkServerPtr &c) const {$/;"	f	class:BeginMakeChunkStable
operator ()	LayoutManager.cc	/^	void operator()(const ChunkServerPtr &s) {$/;"	f	class:RackSetter
operator ()	LayoutManager.cc	/^    void operator () (ChunkServerPtr &c) { c->TruncateChunk(chunkId, sz); }$/;"	f	class:Truncator
operator ()	LayoutManager.cc	/^    void operator () (ChunkServerPtr &c) {$/;"	f	class:UpServersList
operator ()	kfsops.cc	/^	bool operator() (MetaChunkInfo *m) {$/;"	f	class:ChunkIdMatch
operator ()	kfsops.cc	/^	void operator() (MetaDentry *e) {$/;"	f	class:RemoveDumpsterEntry
operator ()	request.cc	/^	void operator () (ChunkServerPtr &s)$/;"	f	class:KFS::PrintChunkServerLocations
operator ()	request.cc	/^	void operator () (ChunkServerPtr c)$/;"	f	class:KFS::EnumerateLocations
operator ()	request.cc	/^	void operator () (const ServerLocation &s)$/;"	f	class:KFS::ListServerLocations
operator ()	request.cc	/^	void operator() (ChunkServerPtr p) {$/;"	f	class:KFS::ChunkVersionChanger
operator ()	request.cc	/^	void operator()(MetaDentry *entry) {$/;"	f	class:KFS::EnumerateReaddirPlusInfo
operator <	LayoutManager.cc	/^	bool operator < (const ServerSpace &other) const {$/;"	f	struct:ServerSpace
operator <	LayoutManager.cc	/^	bool operator < (const ServerSpaceUtil &other) const {$/;"	f	struct:ServerSpaceUtil
os	LayoutManager.cc	/^    ostringstream &os;$/;"	m	class:UpServersList	file:
os	request.cc	/^	ostream &os;$/;"	m	class:KFS::EnumerateReaddirPlusInfo	file:
os	request.cc	/^	ostream &os;$/;"	m	class:KFS::ListServerLocations	file:
os	request.cc	/^	ostream &os;$/;"	m	class:KFS::PrintChunkServerLocations	file:
panic	util.cc	/^KFS::panic(const string msg, bool use_perror)$/;"	f	class:KFS
parse	entry.cc	/^DiskEntry::parse(char *line)$/;"	f	class:DiskEntry
parseHandlerAllocate	request.cc	/^parseHandlerAllocate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerChangeFileReplication	request.cc	/^parseHandlerChangeFileReplication(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerCheckLeases	request.cc	/^parseHandlerCheckLeases(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerChunkCorrupt	request.cc	/^parseHandlerChunkCorrupt(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerCoalesceBlocks	request.cc	/^parseHandlerCoalesceBlocks(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerCreate	request.cc	/^parseHandlerCreate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerDumpChunkReplicationCandidates	request.cc	/^parseHandlerDumpChunkReplicationCandidates(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerDumpChunkToServerMap	request.cc	/^parseHandlerDumpChunkToServerMap(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerExecuteRebalancePlan	request.cc	/^parseHandlerExecuteRebalancePlan(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerFsck	request.cc	/^parseHandlerFsck(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetChunkServerCounters	request.cc	/^parseHandlerGetChunkServerCounters(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetalloc	request.cc	/^parseHandlerGetalloc(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetlayout	request.cc	/^parseHandlerGetlayout(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerHello	request.cc	/^parseHandlerHello(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseAcquire	request.cc	/^parseHandlerLeaseAcquire(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseRelinquish	request.cc	/^parseHandlerLeaseRelinquish(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseRenew	request.cc	/^parseHandlerLeaseRenew(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLookup	request.cc	/^parseHandlerLookup(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLookupPath	request.cc	/^parseHandlerLookupPath(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerMkdir	request.cc	/^parseHandlerMkdir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerOpenFiles	request.cc	/^parseHandlerOpenFiles(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerPing	request.cc	/^parseHandlerPing(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReadConfig	request.cc	/^parseHandlerReadConfig(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReaddir	request.cc	/^parseHandlerReaddir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReaddirPlus	request.cc	/^parseHandlerReaddirPlus(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRecomputeDirsize	request.cc	/^parseHandlerRecomputeDirsize(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRemove	request.cc	/^parseHandlerRemove(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRename	request.cc	/^parseHandlerRename(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRetireChunkserver	request.cc	/^parseHandlerRetireChunkserver(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRmdir	request.cc	/^parseHandlerRmdir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerSetChunkServersProperties	request.cc	/^parseHandlerSetChunkServersProperties(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerSetMtime	request.cc	/^parseHandlerSetMtime(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerStats	request.cc	/^parseHandlerStats(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerToggleRebalancing	request.cc	/^parseHandlerToggleRebalancing(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerToggleWORM	request.cc	/^parseHandlerToggleWORM(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerTruncate	request.cc	/^parseHandlerTruncate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerUpServers	request.cc	/^parseHandlerUpServers(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
path	handler.cc	/^const std::string zinc_handler::path = "\/usr\/local\/";$/;"	m	class:zinc_handler	file:
path_exists	request.cc	/^path_exists(const string &pathname)$/;"	f	namespace:KFS
playAllLogs	replay.cc	/^Replay::playAllLogs()$/;"	f	class:Replay
playlog	replay.cc	/^Replay::playlog()$/;"	f	class:Replay
pop_fid	entry.cc	/^KFS::pop_fid(fid_t &fid, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_name	entry.cc	/^KFS::pop_name(string &name, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_offset	entry.cc	/^KFS::pop_offset(off_t &o, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_parent	replay.cc	/^pop_parent(fid_t &id, deque <string> &c)$/;"	f	file:
pop_path	entry.cc	/^KFS::pop_path(string &path, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_short	entry.cc	/^KFS::pop_short(int16_t &num, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_size	entry.cc	/^KFS::pop_size(size_t &sz, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_time	entry.cc	/^KFS::pop_time(struct timeval &tv, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_type	entry.cc	/^KFS::pop_type(FileType &t, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
poproot	kfstree.cc	/^Tree::poproot()$/;"	f	class:Tree
printleaves	kfstree.cc	/^Tree::printleaves()$/;"	f	class:Tree
printleaves	request.cc	/^printleaves()$/;"	f	namespace:KFS
prioritySet	LayoutManager.cc	/^	CRCandidateSet &prioritySet;$/;"	m	class:ReReplicationCheckIniter	file:
process_request	request.cc	/^process_request(MetaRequest *r)$/;"	f	namespace:KFS
pruneFromHead	kfsops.cc	/^Tree::pruneFromHead(fid_t file, chunkOff_t offset)$/;"	f	class:Tree
pushroot	kfstree.cc	/^Tree::pushroot(Node *brother)$/;"	f	class:Tree
racks	LayoutManager.cc	/^	set<int> &racks;$/;"	m	class:RackSetter	file:
readFd	LayoutManager.cc	/^	set<fid_t> &readFd, &writeFd;$/;"	m	class:OpenFileChecker	file:
readdir	kfsops.cc	/^Tree::readdir(fid_t dir, vector <MetaDentry *> &v)$/;"	f	class:Tree
rebuild	restore.cc	/^Restorer::rebuild(const string cpname, int16_t minReplicas)$/;"	f	class:Restorer
recomputeDirSize	kfsops.cc	/^Tree::recomputeDirSize()$/;"	f	class:Tree
recomputeDirSize	kfsops.cc	/^Tree::recomputeDirSize(fid_t dir, off_t &dirsz)$/;"	f	class:Tree
remove	kfsops.cc	/^Tree::remove(fid_t dir, const string &fname, const string &pathname, off_t *filesize)$/;"	f	class:Tree
remove	kfstree.cc	/^Node::remove(int pos)$/;"	f	class:Node
rename	kfsops.cc	/^Tree::rename(fid_t parent, const string &oldname, string &newname,$/;"	f	class:Tree
replayLogs	filelister_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	kfsfsck_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	logcompactor_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	restoremtime_main.cc	/^static int replayLogs()$/;"	f	file:
replay_allocate	replay.cc	/^replay_allocate(deque <string> &c)$/;"	f	file:
replay_coalesce	replay.cc	/^replay_coalesce(deque <string> &c)$/;"	f	file:
replay_create	replay.cc	/^replay_create(deque <string> &c)$/;"	f	file:
replay_mkdir	replay.cc	/^replay_mkdir(deque <string> &c)$/;"	f	file:
replay_pruneFromHead	replay.cc	/^replay_pruneFromHead(deque <string> &c)$/;"	f	file:
replay_remove	replay.cc	/^replay_remove(deque <string> &c)$/;"	f	file:
replay_rename	replay.cc	/^replay_rename(deque <string> &c)$/;"	f	file:
replay_rmdir	replay.cc	/^replay_rmdir(deque <string> &c)$/;"	f	file:
replay_setmtime	replay.cc	/^replay_setmtime(deque <string> &c)$/;"	f	file:
replay_setrep	replay.cc	/^replay_setrep(deque <string> &c)$/;"	f	file:
replay_size	replay.cc	/^replay_size(deque <string> &c)$/;"	f	file:
replay_truncate	replay.cc	/^replay_truncate(deque <string> &c)$/;"	f	file:
replay_version	replay.cc	/^replay_version(deque <string> &c)$/;"	f	file:
request	request.cc	/^MetaBeginMakeChunkStable::request(ostream &os)$/;"	f	class:KFS::MetaBeginMakeChunkStable
request	request.cc	/^MetaChunkAllocate::request(ostream &os)$/;"	f	class:KFS::MetaChunkAllocate
request	request.cc	/^MetaChunkDelete::request(ostream &os)$/;"	f	class:KFS::MetaChunkDelete
request	request.cc	/^MetaChunkHeartbeat::request(ostream &os)$/;"	f	class:KFS::MetaChunkHeartbeat
request	request.cc	/^MetaChunkMakeStable::request(ostream &os)$/;"	f	class:KFS::MetaChunkMakeStable
request	request.cc	/^MetaChunkReplicate::request(ostream &os)$/;"	f	class:KFS::MetaChunkReplicate
request	request.cc	/^MetaChunkRetire::request(ostream &os)$/;"	f	class:KFS::MetaChunkRetire
request	request.cc	/^MetaChunkServerRestart::request(ostream &os)$/;"	f	class:KFS::MetaChunkServerRestart
request	request.cc	/^MetaChunkSetProperties::request(ostream &os)$/;"	f	class:KFS::MetaChunkSetProperties
request	request.cc	/^MetaChunkSize::request(ostream &os)$/;"	f	class:KFS::MetaChunkSize
request	request.cc	/^MetaChunkStaleNotify::request(ostream &os)$/;"	f	class:KFS::MetaChunkStaleNotify
request	request.cc	/^MetaChunkTruncate::request(ostream &os)$/;"	f	class:KFS::MetaChunkTruncate
request	request.cc	/^MetaChunkVersChange::request(ostream &os)$/;"	f	class:KFS::MetaChunkVersChange
resetKey	kfstree.cc	/^Node::resetKey(int pos)$/;"	f	class:Node
response	request.cc	/^MetaAllocate::response(ostream &os)$/;"	f	class:KFS::MetaAllocate
response	request.cc	/^MetaChangeFileReplication::response(ostream &os)$/;"	f	class:KFS::MetaChangeFileReplication
response	request.cc	/^MetaCheckLeases::response(ostream &os)$/;"	f	class:KFS::MetaCheckLeases
response	request.cc	/^MetaChunkCorrupt::response(ostream &os)$/;"	f	class:KFS::MetaChunkCorrupt
response	request.cc	/^MetaCoalesceBlocks::response(ostream &os)$/;"	f	class:KFS::MetaCoalesceBlocks
response	request.cc	/^MetaCreate::response(ostream &os)$/;"	f	class:KFS::MetaCreate
response	request.cc	/^MetaDumpChunkReplicationCandidates::response(ostream &os)$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
response	request.cc	/^MetaDumpChunkToServerMap::response(ostream &os)$/;"	f	class:KFS::MetaDumpChunkToServerMap
response	request.cc	/^MetaExecuteRebalancePlan::response(ostream &os)$/;"	f	class:KFS::MetaExecuteRebalancePlan
response	request.cc	/^MetaFsck::response(ostream &os)$/;"	f	class:KFS::MetaFsck
response	request.cc	/^MetaGetChunkServersCounters::response(ostream &os)$/;"	f	class:KFS::MetaGetChunkServersCounters
response	request.cc	/^MetaGetalloc::response(ostream &os)$/;"	f	class:KFS::MetaGetalloc
response	request.cc	/^MetaGetlayout::response(ostream &os)$/;"	f	class:KFS::MetaGetlayout
response	request.cc	/^MetaHello::response(ostream &os)$/;"	f	class:KFS::MetaHello
response	request.cc	/^MetaLeaseAcquire::response(ostream &os)$/;"	f	class:KFS::MetaLeaseAcquire
response	request.cc	/^MetaLeaseRelinquish::response(ostream &os)$/;"	f	class:KFS::MetaLeaseRelinquish
response	request.cc	/^MetaLeaseRenew::response(ostream &os)$/;"	f	class:KFS::MetaLeaseRenew
response	request.cc	/^MetaLookup::response(ostream &os)$/;"	f	class:KFS::MetaLookup
response	request.cc	/^MetaLookupPath::response(ostream &os)$/;"	f	class:KFS::MetaLookupPath
response	request.cc	/^MetaMkdir::response(ostream &os)$/;"	f	class:KFS::MetaMkdir
response	request.cc	/^MetaOpenFiles::response(ostream &os)$/;"	f	class:KFS::MetaOpenFiles
response	request.cc	/^MetaPing::response(ostream &os)$/;"	f	class:KFS::MetaPing
response	request.cc	/^MetaReadConfig::response(ostream &os)$/;"	f	class:KFS::MetaReadConfig
response	request.cc	/^MetaReaddir::response(ostream &os)$/;"	f	class:KFS::MetaReaddir
response	request.cc	/^MetaReaddirPlus::response(ostream &os)$/;"	f	class:KFS::MetaReaddirPlus
response	request.cc	/^MetaRecomputeDirsize::response(ostream &os)$/;"	f	class:KFS::MetaRecomputeDirsize
response	request.cc	/^MetaRemove::response(ostream &os)$/;"	f	class:KFS::MetaRemove
response	request.cc	/^MetaRename::response(ostream &os)$/;"	f	class:KFS::MetaRename
response	request.cc	/^MetaRetireChunkserver::response(ostream &os)$/;"	f	class:KFS::MetaRetireChunkserver
response	request.cc	/^MetaRmdir::response(ostream &os)$/;"	f	class:KFS::MetaRmdir
response	request.cc	/^MetaSetChunkServersProperties::response(ostream &os)$/;"	f	class:KFS::MetaSetChunkServersProperties
response	request.cc	/^MetaSetMtime::response(ostream &os)$/;"	f	class:KFS::MetaSetMtime
response	request.cc	/^MetaStats::response(ostream &os)$/;"	f	class:KFS::MetaStats
response	request.cc	/^MetaToggleRebalancing::response(ostream &os)$/;"	f	class:KFS::MetaToggleRebalancing
response	request.cc	/^MetaToggleWORM::response(ostream &os)$/;"	f	class:KFS::MetaToggleWORM
response	request.cc	/^MetaTruncate::response(ostream &os)$/;"	f	class:KFS::MetaTruncate
response	request.cc	/^MetaUpServers::response(ostream &os)$/;"	f	class:KFS::MetaUpServers
restoreCheckpoint	filelister_main.cc	/^static int restoreCheckpoint(const string &lockfn)$/;"	f	file:
restoreCheckpoint	kfsfsck_main.cc	/^static int restoreCheckpoint(const string &lockFn)$/;"	f	file:
restoreCheckpoint	logcompactor_main.cc	/^static int restoreCheckpoint(const string &lockFn)$/;"	f	file:
restoreCheckpoint	restoremtime_main.cc	/^static int restoreCheckpoint()$/;"	f	file:
restoreMtime	restoremtime_main.cc	/^void restoreMtime(string pathname)$/;"	f
restore_chunkVersionInc	restore.cc	/^KFS::restore_chunkVersionInc(deque <string> &c)$/;"	f	class:KFS
restore_chunkinfo	restore.cc	/^restore_chunkinfo(deque <string> &c)$/;"	f	file:
restore_dentry	restore.cc	/^restore_dentry(deque <string> &c)$/;"	f	file:
restore_fattr	restore.cc	/^restore_fattr(deque <string> &c)$/;"	f	file:
restore_makechunkstable	replay.cc	/^restore_makechunkstable(deque <string> &c, bool addFlag)$/;"	f	file:
restore_makestable	restore.cc	/^restore_makestable(deque <string> &c)$/;"	f	file:
restore_mkstable	replay.cc	/^restore_mkstable(deque <string> &c)$/;"	f	file:
restore_mkstabledone	replay.cc	/^restore_mkstabledone(deque <string> &c)$/;"	f	file:
restore_time	replay.cc	/^restore_time(deque <string> &c)$/;"	f	file:
result	LayoutManager.cc	/^	string &result;$/;"	m	class:Pinger	file:
result	LayoutManager.cc	/^	string &result;$/;"	m	class:RetiringStatus	file:
resume	request.cc	/^MetaChunkAllocate::resume()$/;"	f	class:KFS::MetaChunkAllocate
retiringServer	LayoutManager.cc	/^	ChunkServer *retiringServer;$/;"	m	class:MapRetirer	file:
rmdir	kfsops.cc	/^Tree::rmdir(fid_t dir, const string &dname, const string &pathname)$/;"	f	class:Tree
runHandler	handler.cc	/^runHandler (const std::string handler_key)  {$/;"	f	class:zinc_handler
sAllocatorForGdbToFind	metaserver_main.cc	/^static const BufferAllocator* sAllocatorForGdbToFind = 0;$/;"	v	file:
sHeartbeatInterval	ChunkServer.cc	/^int ChunkServer::sHeartbeatInterval    = 30;$/;"	m	class:ChunkServer	file:
sHeartbeatLogInterval	ChunkServer.cc	/^int ChunkServer::sHeartbeatLogInterval = 100;$/;"	m	class:ChunkServer	file:
sHeartbeatTimeout	ChunkServer.cc	/^int ChunkServer::sHeartbeatTimeout     = 60;$/;"	m	class:ChunkServer	file:
sInactivityTimeout	ClientSM.cc	/^int ClientSM::sInactivityTimeout  = 8 * 60;$/;"	m	class:ClientSM	file:
sMaxPendingLength	ClientSM.cc	/^int ClientSM::sMaxPendingLength   = 16;$/;"	m	class:ClientSM	file:
sMaxReadAhead	ClientSM.cc	/^int ClientSM::sMaxReadAhead       = 3 << 10;$/;"	m	class:ClientSM	file:
sMaxWriteBehind	ClientSM.cc	/^int ClientSM::sMaxWriteBehind     = 3 << 10;$/;"	m	class:ClientSM	file:
sReqStatsGatherer	ClientSM.cc	/^} sReqStatsGatherer;$/;"	v	typeref:class:RequestStatsGatherer	file:
sendtime	util.cc	/^KFS::sendtime(ostream &os, const string &prefix, $/;"	f	class:KFS
serverIdx	LayoutManager.cc	/^	uint32_t serverIdx;$/;"	m	struct:ServerSpace	file:
serverIdx	LayoutManager.cc	/^	uint32_t serverIdx;$/;"	m	struct:ServerSpaceUtil	file:
setChunkmapDumpDir	request.cc	/^setChunkmapDumpDir(string d)$/;"	f	namespace:KFS
setClusterKey	request.cc	/^setClusterKey(const char *key)$/;"	f	namespace:KFS
setLog	logger.cc	/^Logger::setLog(int seqno)$/;"	f	class:Logger
setMD5SumFn	request.cc	/^setMD5SumFn(const char *md5sumFn)$/;"	f	namespace:KFS
setMaxReplicasPerFile	request.cc	/^setMaxReplicasPerFile(int16_t val)$/;"	f	namespace:KFS
setWORMMode	request.cc	/^setWORMMode(bool value)$/;"	f	namespace:KFS
setup_handlers	request.cc	/^setup_handlers()$/;"	f	namespace:KFS
setup_initial_tree	startup.cc	/^setup_initial_tree(uint32_t minNumReplicasPerFile)$/;"	f	file:
shiftLeft	kfstree.cc	/^Node::shiftLeft(Node *dest, int nshift)$/;"	f	class:Node
shiftRight	kfstree.cc	/^Node::shiftRight(Node *dest, int nshift)$/;"	f	class:Node
shift_path	kfstree.cc	/^Tree::shift_path(vector <pathlink> &path)$/;"	f	class:Tree
show	kfstree.cc	/^Node::show() const$/;"	f	class:Node
show	meta.cc	/^MetaChunkInfo::show() const$/;"	f	class:MetaChunkInfo
show	meta.cc	/^MetaDentry::show() const$/;"	f	class:MetaDentry
show	meta.cc	/^MetaFattr::show() const$/;"	f	class:MetaFattr
showChildren	kfstree.cc	/^Node::showChildren() const$/;"	f	class:Node
showNode	kfstree.cc	/^showNode(MetaNode *n)$/;"	f
showtime	meta.cc	/^KFS::showtime(struct timeval t)$/;"	f	class:KFS
split	kfstree.cc	/^Node::split(Tree *t, Node *father, int pos)$/;"	f	class:Node
split	util.cc	/^KFS::split(deque <string> &component, const string path, char sep)$/;"	f	class:KFS
startLog	logger.cc	/^Logger::startLog(int seqno)$/;"	f	class:Logger
submit_request	request.cc	/^submit_request(MetaRequest *r)$/;"	f	namespace:KFS
sz	LayoutManager.cc	/^    off_t sz;$/;"	m	class:Truncator	file:
target	LayoutManager.cc	/^	const ChunkServer * const target;$/;"	m	struct:ExpireLeaseIfOwner	file:
target	LayoutManager.cc	/^	const ChunkServer* const target;$/;"	m	class:MapPurger	file:
timeToStr	util.cc	/^KFS::timeToStr(time_t val)$/;"	f	class:KFS
toNumber	util.cc	/^KFS::toNumber(string s)$/;"	f	class:KFS
toString	util.cc	/^KFS::toString(long long n)$/;"	f	class:KFS
totalSpace	LayoutManager.cc	/^	uint64_t &totalSpace;$/;"	m	class:Pinger	file:
truncate	kfsops.cc	/^Tree::truncate(fid_t file, chunkOff_t offset, chunkOff_t *allocOffset)$/;"	f	class:Tree
unlink	kfsops.cc	/^Tree::unlink(fid_t dir, const string fname, MetaFattr *fa, bool save_fa)$/;"	f	class:Tree
updateSeed	replay.cc	/^updateSeed(UniqueID &id, seqid_t seed)$/;"	f	file:
updateSpaceUsageForPath	kfsops.cc	/^Tree::updateSpaceUsageForPath(const string &path, off_t nbytes)$/;"	f	class:Tree
usedSpace	LayoutManager.cc	/^	uint64_t &usedSpace;$/;"	m	class:Pinger	file:
usedSpace	LayoutManager.cc	/^	uint64_t usedSpace;$/;"	m	struct:ServerSpace	file:
utilization	LayoutManager.cc	/^	float utilization;$/;"	m	struct:ServerSpaceUtil	file:
v	request.cc	/^	vector <ServerLocation> &v;$/;"	m	class:KFS::EnumerateLocations	file:
warn	util.cc	/^KFS::warn(const string msg, bool use_perror)$/;"	f	class:KFS
writeFd	LayoutManager.cc	/^	set<fid_t> &readFd, &writeFd;$/;"	m	class:OpenFileChecker	file:
writeLeaseCount	LayoutManager.cc	/^	int             writeLeaseCount;$/;"	m	class:DecChunkWriteCount	file:
write_leaves	checkpoint.cc	/^Checkpoint::write_leaves()$/;"	f	class:Checkpoint
~ChunkReplicator	ChunkReplicator.cc	/^ChunkReplicator::~ChunkReplicator()$/;"	f	class:ChunkReplicator
~ChunkServer	ChunkServer.cc	/^ChunkServer::~ChunkServer()$/;"	f	class:ChunkServer
~ClientSM	ClientSM.cc	/^ClientSM::~ClientSM()$/;"	f	class:ClientSM
~LeaseCleaner	LeaseCleaner.cc	/^LeaseCleaner::~LeaseCleaner()$/;"	f	class:LeaseCleaner
~NetDispatch	NetDispatch.cc	/^NetDispatch::~NetDispatch()$/;"	f	class:NetDispatch
